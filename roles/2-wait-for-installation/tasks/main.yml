- name: Get CoreOS ISO download url
  ansible.builtin.shell:
    cmd: >-
      "{{ openshift_install_executable }}" coreos print-stream-json
      | jq -r '.architectures.x86_64.artifacts.metal.formats.iso.disk.location'
  delegate_to: localhost
  run_once: true
  register: coreos_iso_url_cmd
  changed_when: false

- name: Save CoreOS ISO download url to a variable
  ansible.builtin.set_fact:
    coreos_iso_url: "{{ coreos_iso_url_cmd.stdout }}"
  delegate_to: localhost
  run_once: true

- name: Pause for starting coreos installation on masters
  ansible.builtin.pause:
    prompt: |
      Download and create a bootable USB for Fedora CoreOS:
      {{ coreos_iso_url }}
      Manually run sudo coreos-installer on masters according to README.md and reboot.
      Verify they are trying to retrieve the second stage ignition file.
      Press return to continue

- name: Pause for starting CoreOS installation on bootstrap
  ansible.builtin.pause:
    prompt: |
      Manually run sudo coreos-installer on bootstrap according to README.md and reboot.
      Press return to continue

- name: Wait for API server to start on all masters
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}:6443/readyz"
    method: GET
    status_code: 200
    validate_certs: false
  delegate_to: localhost
  register: result
  when: inventory_hostname in groups['masters']
  until: result.status == 200
  retries: 5000 # retry X times
  delay: 5 # pause for X sec b/w each call

- name: Check bootstrap status
  ansible.builtin.raw: |
    journalctl -b -u release-image.service -u bootkube.service \
    | grep "bootkube.service: Deactivated successfully." \
    | wc -l
  when:
    - inventory_hostname == groups['bootstrap'][0]
  register: journalctl
  retries: 1000
  delay: 30
  until: journalctl.stdout == "1\r\n"

- name: Shutdown the bootstrap machine
  ansible.builtin.raw: |
    sudo shutdown 1
  when:
    - inventory_hostname == groups['bootstrap'][0]
