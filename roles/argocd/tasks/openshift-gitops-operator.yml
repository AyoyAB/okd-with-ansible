---
- name: Create or update the openshift-gitops-operator namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
    resource_definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-gitops-operator
        annotations:
          openshift.io/node-selector: ""
          workload.openshift.io/allowed: management
        labels:
          openshift.io/scc: ""
      spec: {}

- name: Create or update the ClusterRole application-controller-additional
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
    src: templates/openshift-gitops-openshift-gitops-argocd-application-controller.yaml

- name: Create or update the ClusterRoleBinding for application-controller-additional
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
    resource_definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: openshift-gitops-openshift-gitops-argocd-application-controller-additional
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: openshift-gitops-openshift-gitops-argocd-application-controller-additional
      subjects:
        - kind: ServiceAccount
          name: openshift-gitops-argocd-application-controller
          namespace: openshift-gitops

- name: Create or update the ClusterRole applicationset-controller-additional
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
    src: templates/openshift-gitops-openshift-gitops-argocd-applicationset-controller.yaml

- name: Create or update the ClusterRoleBinding for applicationset-controller-additional
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
    resource_definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: openshift-gitops-openshift-gitops-argocd-applicationset-controller-additional
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: openshift-gitops-openshift-gitops-argocd-applicationset-controller-additional
      subjects:
        - kind: ServiceAccount
          name: openshift-gitops-applicationset-controller
          namespace: openshift-gitops

- name: Create or update the ClusterRole server-additional
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
    src: templates/openshift-gitops-openshift-gitops-argocd-server.yaml

- name: Create or update the ClusterRoleBinding for server-additional
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
    resource_definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: openshift-gitops-openshift-gitops-argocd-server-additional
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: openshift-gitops-openshift-gitops-argocd-server-additional
      subjects:
        - kind: ServiceAccount
          name: openshift-gitops-argocd-server
          namespace: openshift-gitops

- name: Create or update Openshift Gitops operator group
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: openshift-gitops-operator
        namespace: openshift-gitops-operator
      spec: {}


- name: Create or update Openshift Gitops subscription
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
#        labels:
#          operators.coreos.com/argocd-operator.openshift-operators: ""
        name: openshift-gitops-operator
        namespace: openshift-gitops-operator
      spec:
        channel: "{{ argocd_operator_channel }}"
        installPlanApproval: Automatic
        name: openshift-gitops-operator
        source: redhat-operators
        sourceNamespace: openshift-marketplace
        startingCSV: openshift-gitops-operator.{{ openshift_gitops_operator_starting_cluster_service_version }}
        config:
          env:
            - name: ARGOCD_CLUSTER_CONFIG_NAMESPACES
              value: "{{ argocd_namespace }}"

- name: Wait for Openshift Gitops Operator to start
  ansible.builtin.shell:
    cmd: |
      set -o pipefail && \
      KUBECONFIG="{{ openshift_files_kubeconfig }}" \
      "{{ openshift_client_executable }}" \
      -n openshift-gitops-operator \
      get deploy openshift-gitops-operator-controller-manager -o json \
      | jq '.status.readyReplicas'
    executable: /bin/bash
  register: ready_replicas
  retries: 60
  delay: 5
  until: ready_replicas.stdout == "1"
  changed_when: false

- name: Create or update namespace {{ argocd_namespace }}
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ argocd_namespace }}"
        annotations:
          openshift.io/node-selector: ""

- name: Setup a basic Argo CD cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      apiVersion: argoproj.io/v1beta1  # ArgoCD v1alpha1 CRD has been deprecated starting from argocd-operator v0.8.0
      kind: ArgoCD
      metadata:
        name: openshift-gitops
        namespace: "{{ argocd_namespace }}"
        labels:
          app.kubernetes.io/instance: openshift-gitops
      spec:
        applicationSet:
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 73Mi
        controller:
          appSync: 10m  # Sync with git every 10m
          resources:
            limits:
              memory: 2500Mi
            requests:
              cpu: 10m
              memory: 222Mi
          sharding:
            enabled: true
            replicas: 2
        defaultClusterScopedRoleDisabled: false
        disableAdmin: true
        ha:
          enabled: true
          resources:
            limits:
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
        sso:
          provider: dex
          dex:
            openShiftOAuth: true
            groups:
              - "system:authenticated"
              - "system:cluster-admins"
            resources:
              limits:
                memory: 256Mi
              requests:
                cpu: 250m
                memory: 128Mi
        server:
          autoscale:
            enabled: true
            hpa:
              maxReplicas: 3
              minReplicas: 2
              scaleTargetRef:
                apiVersion: apps/v1
                kind: Deployment
                name: argocd-server
          env:
            - name: ARGOCD_SYNC_WAVE_DELAY
              value: "{{ argocd_sync_wave_delay | default('2') }}"
          route:
            enabled: true
          resources:
            limits:
              memory: 321Mi
            requests:
              cpu: 125m
              memory: 224Mi
        prometheus:
          enabled: true
          ingress:
            enabled: false
          route:
            enabled: false
        rbac:
          defaultPolicy: 'role:readonly'
          policy: |
            g, system:cluster-admins, role:admin
            g, github-cluster-admins, role:admin
            g, system:authenticated, role:readonly
          scopes: '[groups]'
        redis:
          image: registry.okd4.example.com:5010/library/redis
          resources:  # This is only used if ha.enabled is false
            limits:
              memory: 128Mi
            requests:
              cpu: 12m
              memory: 64Mi
        repo:
          replicas: 2
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 55m
              memory: 164Mi
        cm:
          resource.customizations: |
            argoproj.io/Application:
              health.lua: |
                hs = {}
                hs.status = "Progressing"
                hs.message = ""
                if obj.status ~= nil then
                  if obj.status.health ~= nil then
                    hs.status = obj.status.health.status
                    if obj.status.health.message ~= nil then
                      hs.message = obj.status.health.message
                    end
                  end
                end
                return hs
