- name: 4.1 Create or update the namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      kind: Namespace
      apiVersion: v1
      metadata:
        name: nfs-provisioner

- name: 4.2 Create or update the service account
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      kind: ServiceAccount
      apiVersion: v1
      metadata:
        name: nfs-pod-provisioner-sa
        namespace: nfs-provisioner

- name: 4.3 Create or update the ClusterRole
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      kind: ClusterRole # Role of kubernetes
      apiVersion: rbac.authorization.k8s.io/v1 # auth API
      metadata:
        name: nfs-provisioner-clusterRole
      rules:
        - apiGroups: [""] # rules on persistentvolumes
          resources: ["persistentvolumes"]
          verbs: ["get", "list", "watch", "create", "delete"]
        - apiGroups: [""]
          resources: ["persistentvolumeclaims"]
          verbs: ["get", "list", "watch", "update"]
        - apiGroups: ["storage.k8s.io"]
          resources: ["storageclasses"]
          verbs: ["get", "list", "watch"]
        - apiGroups: [""]
          resources: ["events"]
          verbs: ["create", "update", "patch"]

- name: 4.4 Create or update the ClusterRoleBinding
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: nfs-provisioner-rolebinding
      subjects:
        - kind: ServiceAccount
          name: nfs-pod-provisioner-sa # defined on top of file
          namespace: nfs-provisioner
      roleRef: # binding cluster role to service account
        kind: ClusterRole
        name: nfs-provisioner-clusterRole # name defined in clusterRole
        apiGroup: rbac.authorization.k8s.io

- name: 4.5 Create or update the Role
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      kind: Role
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: nfs-pod-provisioner-otherRoles
        namespace: nfs-provisioner
      rules:
        - apiGroups: [""]
          resources: ["endpoints"]
          verbs: ["get", "list", "watch", "create", "update", "patch"]

- name: 4.6 Create or update the RoleBinding
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: nfs-pod-provisioner-otherRoles
        namespace: nfs-provisioner
      subjects:
        - kind: ServiceAccount
          name: nfs-pod-provisioner-sa # same as top of the file
          # replace with namespace where provisioner is deployed
      roleRef:
        kind: Role
        name: nfs-pod-provisioner-otherRoles
        apiGroup: rbac.authorization.k8s.io

- name: 4.7 Create or update the storage-class
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    resource_definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: nfs-storageclass # IMPORTANT pvc needs to mention this name
        namespace: nfs-provisioner
        annotations:
          "storageclass.kubernetes.io/is-default-class": "true"
      provisioner: nfs-provider # name can be anything
      parameters:
        archiveOnDelete: "false"

- name: 4.8 Fix rights to use NFS
  ansible.builtin.shell: |
    KUBECONFIG="{{ openshift_files_kubeconfig }}" \
    "{{ openshift_client_executable }}" \
    -n nfs-provisioner \
    adm policy add-scc-to-user hostmount-anyuid -z nfs-pod-provisioner-sa
  changed_when: true

- name: 4.9 Fetch valid UID range to use for namespace
  ansible.builtin.shell: |
    KUBECONFIG="{{ openshift_files_kubeconfig }}" \
    "{{ openshift_client_executable }}" \
    get ns nfs-provisioner -o json \
    | jq --raw-output '.metadata.annotations."openshift.io/sa.scc.uid-range"'
  register: uidrange
  until: uidrange.stdout != "null"
  retries: 60
  delay: 30
  changed_when: true

- name: Log uidrange
  ansible.builtin.debug:
    var: uidrange

- name: Set nfs_uid variable
  ansible.builtin.set_fact:
    nfs_uid: "{{ uidrange | regex_search('[0-9]+') }}"

- name: 4.10 Create or update the provisioner
  kubernetes.core.k8s:
    kubeconfig: "{{ openshift_files_kubeconfig }}"
    template: 'templates/4-nfs-pod-provisioner.yaml'

- name: 4.11 Wait for NFS provisioner to start
  ansible.builtin.shell: |
    KUBECONFIG="{{ openshift_files_kubeconfig }}" \
    "{{ openshift_client_executable }}" \
    -n nfs-provisioner \
    get deployment nfs-pod-provisioner -o json \
    | jq '.status.readyReplicas'
  register: ready_replicas
  retries: 120
  delay: 5
  until: ready_replicas.stdout == "1"
  changed_when: false
