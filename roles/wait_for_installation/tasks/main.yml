---
- name: Show CoreOS ISO Prompt
  when: not wait_for_installation_skip_coreos_iso_prompt
  block:
    - name: Get CoreOS ISO x86/x64 download url
      ansible.builtin.shell:
        cmd: >-
          set -o pipefail &&
          "{{ openshift_install_executable }}" coreos print-stream-json
          | jq -r '.architectures.x86_64.artifacts.metal.formats.iso.disk.location'
        executable: /bin/bash
      delegate_to: localhost
      run_once: true
      register: coreos_iso_x86_64_url_cmd
      changed_when: false

    - name: Save CoreOS ISO x86/x64 download url to a variable
      ansible.builtin.set_fact:
        coreos_iso_x86_64_url: "{{ coreos_iso_x86_64_url_cmd.stdout }}"
      delegate_to: localhost
      run_once: true

    - name: Get CoreOS ISO aarch64 (arm64) download url
      ansible.builtin.shell:
        cmd: >-
          set -o pipefail &&
          "{{ openshift_install_executable }}" coreos print-stream-json
          | jq -r '.architectures.aarch64.artifacts.metal.formats.iso.disk.location'
        executable: /bin/bash
      delegate_to: localhost
      run_once: true
      register: coreos_iso_aarch64_url_cmd
      changed_when: false

    - name: Save CoreOS ISO aarch64 (arm64) download url to a variable
      ansible.builtin.set_fact:
        coreos_iso_aarch64_url: "{{ coreos_iso_aarch64_url_cmd.stdout }}"
      delegate_to: localhost
      run_once: true

    - name: Pause for downloading CoreOS ISO
      ansible.builtin.pause:
        prompt: |
          --------------------------------------------------------------------
          - Download (and create a bootable USB if needed) for Fedora CoreOS -
          --------------------------------------------------------------------

          x86/x64: {{ coreos_iso_x86_64_url }}
          aarch64: {{ coreos_iso_aarch64_url }}

          ----------------------------
          - Press return to continue -
          ----------------------------

- name: Pause for starting CoreOS installation on bootstrap
  ansible.builtin.pause:
    prompt: |
      ---------------------------------
      - Do the following on bootstrap -
      ---------------------------------

      1. Boot CoreOS
      2. Run the following command:

      bash -c "$(curl -fsSL http://{{ groups.lbs[0] }}:8080/install.sh)"
      or
      bash -c "$(curl -fsSL http://{{ groups.lbs[0] }}:8080/install.sh)" -s bootstrap

      3. Reboot and verify it's trying to retrieve the second stage ignition file.

      ----------------------------
      - Press return to continue -
      ----------------------------

- name: Pause for starting CoreOS installation on masters
  ansible.builtin.pause:
    prompt: |
      -----------------------------------
      - Do the following on all masters -
      -----------------------------------
      1. Boot CoreOS
      2. Run the following command to install CoreOS:

      bash -c "$(curl -fsSL http://{{ groups.lbs[0] }}:8080/install.sh)"
      or
      bash -c "$(curl -fsSL http://{{ groups.lbs[0] }}:8080/install.sh)" -s master[1-3]

      3. Reboot and verify they are trying to retrieve the second stage ignition file.

      ----------------------------
      - Press return to continue -
      ----------------------------

- name: Wait for bootstrap to finish
  ansible.builtin.shell:
    cmd: >-
      "{{ openshift_install_executable }}" wait-for bootstrap-complete --dir={{ openshift_files_directory }}/
    executable: /bin/bash
  delegate_to: localhost
  register: bootstrap_complete
  become: false
  changed_when: false
  until: bootstrap_complete.rc == 0
  when:
    - inventory_hostname == groups.bootstrap[0]

- name: Shutdown the bootstrap machine
  ansible.builtin.raw: |
    sudo shutdown 1
  when:
    - inventory_hostname == groups.bootstrap[0]
  changed_when: true
