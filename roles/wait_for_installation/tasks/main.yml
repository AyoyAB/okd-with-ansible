---
- name: Get CoreOS ISO download url
  ansible.builtin.shell:
    cmd: >-
      set -o pipefail &&
      "{{ openshift_install_executable }}" coreos print-stream-json
      | jq -r '.architectures.x86_64.artifacts.metal.formats.iso.disk.location'
    executable: /bin/bash
  delegate_to: localhost
  run_once: true
  register: coreos_iso_url_cmd
  changed_when: false

- name: Save CoreOS ISO download url to a variable
  ansible.builtin.set_fact:
    coreos_iso_url: "{{ coreos_iso_url_cmd.stdout }}"
  delegate_to: localhost
  run_once: true

- name: Pause for downloading CoreOS iso
  ansible.builtin.pause:
    prompt: |
      --------------------------------------------------------------------
      - Download (and create a bootable USB if needed) for Fedora CoreOS -
      --------------------------------------------------------------------

      {{ coreos_iso_url }}

      ----------------------------
      - Press return to continue -
      ----------------------------

- name: Pause for starting CoreOS installation on masters
  ansible.builtin.pause:
    prompt: |
      -----------------------------------
      - Do the following on all masters -
      -----------------------------------
      1. Boot CoreOS
      2. Run the following command to install CoreOS:

      bash -c "$(curl -fsSL http://{{ groups.lbs[0] }}:8080/install.sh)"
      or
      bash -c "$(curl -fsSL http://{{ groups.lbs[0] }}:8080/install.sh)" -s master[1-3]

      3. Reboot and verify they are trying to retrieve the second stage ignition file.

      ----------------------------
      - Press return to continue -
      ----------------------------

- name: Pause for starting CoreOS installation on bootstrap
  ansible.builtin.pause:
    prompt: |
      ---------------------------------
      - Do the following on bootstrap -
      ---------------------------------

      1. Boot CoreOS
      2. Run the following command:

      bash -c "$(curl -fsSL http://{{ groups.lbs[0] }}:8080/install.sh)"
      or
      bash -c "$(curl -fsSL http://{{ groups.lbs[0] }}:8080/install.sh)" -s bootstrap

      3. Reboot and verify they are trying to retrieve the second stage ignition file.

      ----------------------------
      - Press return to continue -
      ----------------------------

- name: Wait for API server to start on all masters
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}:6443/readyz"
    method: GET
    status_code: 200
    validate_certs: false
  delegate_to: localhost
  register: result
  when: inventory_hostname in groups.masters
  until: result.status == 200
  retries: 1000  # retry X times
  delay: 5  # pause for X sec b/w each call

- name: Check bootstrap status
  ansible.builtin.raw: |
    journalctl -b -u release-image.service -u bootkube.service \
    | grep "bootkube.service: Deactivated successfully." \
    | wc -l
  when:
    - inventory_hostname == groups.bootstrap[0]
  register: journalctl
  retries: 1000
  delay: 30
  until: journalctl.stdout == "1\r\n"
  changed_when: false

- name: Shutdown the bootstrap machine
  ansible.builtin.raw: |
    sudo shutdown 1
  when:
    - inventory_hostname == groups.bootstrap[0]
  changed_when: true
